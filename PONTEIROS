//1. Ponteiro para variável simples
Descrição: Declare uma variável inteira e um ponteiro para inteiro. Faça o ponteiro apontar para a variável e use-o para modificar o valor da variável.
Entrada esperada: Nenhuma entrada do usuário.
Saída esperada: Exibe o valor antes e depois da modificação via ponteiro.
#include <stdio.h>

int main() {
    int var = 10;
    int *p;  // ponteiro para inteiro

    p = &var;  // ponteiro aponta para a variável

    printf("Valor original da variável: %d\n", var);

    // Modificar o valor da variável usando o ponteiro
    *p = 25;

    printf("Valor da variável após modificação via ponteiro: %d\n", var);

    return 0;
}


2. Incremento com ponteiro
Descrição: Escreva uma função que receba um ponteiro para inteiro e incremente o valor apontado.
Entrada esperada: Número digitado pelo usuário.
Saída esperada: Valor antes e depois do incremento feito na função.
#include <stdio.h>

void incrementar(int *p) {
    (*p)++;  // incrementa o valor apontado pelo ponteiro
}

int main() {
    int num;

    printf("Digite um número inteiro: ");
    scanf("%d", &num);

    printf("Valor antes do incremento: %d\n", num);

    incrementar(&num);

    printf("Valor após o incremento: %d\n", num);

    return 0;
}



3. Troca de valores com ponteiros (swap)
Descrição: Escreva uma função que receba dois ponteiros e troque os valores apontados por eles.
Entrada esperada: Dois inteiros.
Saída esperada: Valores antes e depois da troca.
#include <stdio.h>

// Função que troca os valores apontados por p1 e p2
void trocar(int *p1, int *p2) {
    int temp = *p1;
    *p1 = *p2;
    *p2 = temp;
}

int main() {
    int a, b;

    printf("Digite o primeiro inteiro: ");
    scanf("%d", &a);

    printf("Digite o segundo inteiro: ");
    scanf("%d", &b);

    printf("\nAntes da troca: a = %d, b = %d\n", a, b);

    trocar(&a, &b);

    printf("Depois da troca: a = %d, b = %d\n", a, b);

    return 0;
}



Acesso a vetor com ponteiros
Descrição: Declare um vetor de inteiros e use aritmética de ponteiros para acessar e exibir seus elementos.
Entrada esperada: 5 números inteiros.
Saída esperada: Os 5 números lidos, exibidos usando ponteiros.

#include <stdio.h>

int main() {
    int vetor[5];
    int *p = vetor; // ponteiro para o início do vetor
    int i;

    printf("Digite 5 números inteiros:\n");
    for (i = 0; i < 5; i++) {
        scanf("%d", &vetor[i]);
    }

    printf("\nNúmeros lidos (acessados via ponteiros):\n");
    for (i = 0; i < 5; i++) {
        printf("%d ", *(p + i));  // aritmética de ponteiros
    }
    printf("\n");

    return 0;
}


5. Soma de elementos de vetor via ponteiros
Descrição: Crie uma função que receba um ponteiro para o primeiro elemento de um vetor e sua quantidade de elementos, e retorne a soma de todos.
Entrada esperada: Tamanho e elementos do vetor.
Saída esperada: Soma total.

#include <stdio.h>

int somaVetor(int *vetor, int tamanho) {
    int soma = 0;
    for (int i = 0; i < tamanho; i++) {
        soma += *(vetor + i);  // acessar usando ponteiro
    }
    return soma;
}

int main() {
    int n;

    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    int vetor[n];  // vetor com tamanho n

    printf("Digite %d elementos:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &vetor[i]);
    }

    int total = somaVetor(vetor, n);

    printf("Soma total dos elementos: %d\n", total);

    return 0;
}

6. Ponteiros e strings (char)*
Descrição: Escreva um programa que leia uma string e conte quantas letras maiúsculas ela contém, usando ponteiros.
Entrada esperada: Uma string.
Saída esperada: Número de letras maiúsculas.
#include <stdio.h>
#include <ctype.h>  // para isupper()

int contarMaiusculas(char *str) {
    int count = 0;
    while (*str != '\0') {
        if (isupper((unsigned char)*str)) {
            count++;
        }
        str++;
    }
    return count;
}

int main() {
    char texto[100];

    printf("Digite uma string: ");
    fgets(texto, sizeof(texto), stdin);

    // Remove o '\n' do final, se existir
    texto[strcspn(texto, "\n")] = '\0';

    int totalMaiusculas = contarMaiusculas(texto);

    printf("Número de letras maiúsculas: %d\n", totalMaiusculas);

    return 0;
}

7. Alocação dinâmica com malloc
Descrição: Peça ao usuário o tamanho de um vetor, aloque memória com malloc, preencha e exiba os elementos.
Entrada esperada: Tamanho e valores do vetor.
Saída esperada: Elementos armazenados.

#include <stdio.h>
#include <stdlib.h>  // para malloc e free

int main() {
    int n;
    int *vetor;

    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    // Alocar memória para n inteiros
    vetor = (int *)malloc(n * sizeof(int));
    if (vetor == NULL) {
        printf("Erro na alocação de memória!\n");
        return 1;
    }

    // Preencher o vetor
    printf("Digite %d valores inteiros:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &vetor[i]);
    }

    // Exibir os elementos
    printf("Elementos armazenados:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    // Liberar a memória alocada
    free(vetor);

    return 0;
}

8. Função que retorna ponteiro (maior valor)
Descrição: Crie uma função que receba dois inteiros e retorne um ponteiro para o maior deles.
Entrada esperada: Dois inteiros.
Saída esperada: Valor apontado pelo ponteiro retornado (o maior).
#include <stdio.h>

// Função que recebe dois inteiros e retorna ponteiro para o maior
int* maiorValor(int *a, int *b) {
    if (*a > *b)
        return a;
    else
        return b;
}

int main() {
    int x, y;

    printf("Digite o primeiro inteiro: ");
    scanf("%d", &x);

    printf("Digite o segundo inteiro: ");
    scanf("%d", &y);

    int *pMaior = maiorValor(&x, &y);

    printf("O maior valor é: %d\n", *pMaior);

    return 0;
}






